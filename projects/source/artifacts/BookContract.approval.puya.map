{
  "version": 3,
  "sources": [
    "../../trader_app/contract.py"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;AAAA;;AA4IK;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AApHL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAoHK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAVA;;AAAA;AAAA;AAAA;;AAAA;AA1GL;;;AAAA;;;AA0GK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AA/EL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;;;AA+EK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAtCL;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAAA;;;AAsCK;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAtCL;;AAAA;;;;;;;;;AAsCA;;;AAIQ;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAiB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAjB;AAGA;;AAAA;;AAAA;AACA;AAAgB;;AAAhB;AAEO;AAAP;AAMO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAGA;;AAAmB;AAAnB;AACA;;AAAuB;AAAvB;AACA;;AAAgB;AAAhB;AAEO;AAAP;AAKO;;AAAc;AAAA;AAAA;AAAA;AAAd;AAAP;AACO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAGA;;AAAmB;AAAnB;AACA;;AAAuB;AAAvB;AACA;;AAAgB;AAAhB;AAEO;AAAP;AAER;;;AAUY;;AAAc;;AAAd;AADJ;AAIK;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAD;;;AACI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AADJ;;;AAEI;AAAA;AAAA;AAAA;AAAA;;AAAA;AAFJ;;;AAGI;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAHJ;;;;AADJ;AAQA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAEO;AAAP;;;;;AAER;;;AAGe;;AAAc;;AAAd;AAAP;AAGA;AAAA;;AAAA;AAEO;AAAP;AAER;;;AAMY;;AAAc;AAAA;AAAA;AAAA;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAiB;;AAAjB;AAAP;AAII;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AACG;AAAA;;AAAA;AAAA;AAAA;;AAAA;AADH;;;AAEG;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAFH;;;;AADJ;AAOA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AACA;;AAAA;;AAAA;AAEO;AAAP;;;;;AAMI;;AAAc;;AAAd;AADJ;AAGO;AAAA;AAAA;AAAA;AAAiB;;;;;;;;;;;;;;;AAAjB;AAAA;;;AAA4C;AAAA;AAAA;AAAA;AAAiB;;;;;;;;;;;;;;;AAAjB;AAA5C;;;;AAAP;AAIO;AAAP;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.__algopy_entrypoint_with_init",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1"
    },
    "5": {
      "op": "bytecblock 0x151f7c75 \"g_status\" \"g_address\" 0x4e414e \"ACTIVE\" \"l_book_hash\" \"l_research_hash\" \"l_params\" \"g_user_id\" \"g_book_id\" \"g_params\""
    },
    "108": {
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#2"
      ],
      "stack_out": [
        "tmp%0#2"
      ]
    },
    "110": {
      "op": "bz main_bare_routing@12",
      "stack_out": []
    },
    "113": {
      "op": "pushbytess 0x2325f9af 0x8789bcdb 0xabe79c1f 0x8af67f50 0xfa98abdf 0xa1d81bd3 0x20bef5f7 // method \"initialize(byte[],byte[],byte[])uint64\", method \"opt_in()uint64\", method \"close_out()uint64\", method \"update_global(byte[],byte[],account,byte[])uint64\", method \"update_status(string)uint64\", method \"update_local(byte[],byte[],byte[])uint64\", method \"delete_application()uint64\"",
      "defined_out": [
        "Method(close_out()uint64)",
        "Method(delete_application()uint64)",
        "Method(initialize(byte[],byte[],byte[])uint64)",
        "Method(opt_in()uint64)",
        "Method(update_global(byte[],byte[],account,byte[])uint64)",
        "Method(update_local(byte[],byte[],byte[])uint64)",
        "Method(update_status(string)uint64)"
      ],
      "stack_out": [
        "Method(initialize(byte[],byte[],byte[])uint64)",
        "Method(opt_in()uint64)",
        "Method(close_out()uint64)",
        "Method(update_global(byte[],byte[],account,byte[])uint64)",
        "Method(update_status(string)uint64)",
        "Method(update_local(byte[],byte[],byte[])uint64)",
        "Method(delete_application()uint64)"
      ]
    },
    "150": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(close_out()uint64)",
        "Method(delete_application()uint64)",
        "Method(initialize(byte[],byte[],byte[])uint64)",
        "Method(opt_in()uint64)",
        "Method(update_global(byte[],byte[],account,byte[])uint64)",
        "Method(update_local(byte[],byte[],byte[])uint64)",
        "Method(update_status(string)uint64)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(initialize(byte[],byte[],byte[])uint64)",
        "Method(opt_in()uint64)",
        "Method(close_out()uint64)",
        "Method(update_global(byte[],byte[],account,byte[])uint64)",
        "Method(update_status(string)uint64)",
        "Method(update_local(byte[],byte[],byte[])uint64)",
        "Method(delete_application()uint64)",
        "tmp%2#0"
      ]
    },
    "153": {
      "op": "match main_initialize_route@5 main_opt_in_route@6 main_close_out_route@7 main_update_global_route@8 main_update_status_route@9 main_update_local_route@10 main_delete_application_route@11",
      "stack_out": []
    },
    "169": {
      "block": "main_after_if_else@14",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "170": {
      "op": "return",
      "stack_out": []
    },
    "171": {
      "block": "main_delete_application_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "173": {
      "op": "pushint 5 // DeleteApplication",
      "defined_out": [
        "DeleteApplication",
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0",
        "DeleteApplication"
      ]
    },
    "175": {
      "op": "==",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "176": {
      "error": "OnCompletion is not DeleteApplication",
      "op": "assert // OnCompletion is not DeleteApplication",
      "stack_out": []
    },
    "177": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "179": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "180": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.delete_application",
      "op": "callsub delete_application",
      "defined_out": [
        "to_encode%6#0"
      ],
      "stack_out": [
        "to_encode%6#0"
      ]
    },
    "183": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0"
      ]
    },
    "184": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ],
      "stack_out": [
        "val_as_bytes%6#0",
        "0x151f7c75"
      ]
    },
    "185": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%6#0"
      ]
    },
    "186": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "187": {
      "op": "log",
      "stack_out": []
    },
    "188": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "189": {
      "op": "return",
      "stack_out": []
    },
    "190": {
      "block": "main_update_local_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "192": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "193": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "194": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "196": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "197": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "200": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "203": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%49#0",
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%50#0"
      ]
    },
    "206": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0"
      ]
    },
    "209": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%52#0"
      ]
    },
    "212": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%49#0",
        "tmp%51#0",
        "tmp%53#0"
      ]
    },
    "215": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.update_local",
      "op": "callsub update_local",
      "defined_out": [
        "to_encode%5#0"
      ],
      "stack_out": [
        "to_encode%5#0"
      ]
    },
    "218": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0"
      ]
    },
    "219": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "val_as_bytes%5#0",
        "0x151f7c75"
      ]
    },
    "220": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%5#0"
      ]
    },
    "221": {
      "op": "concat",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "222": {
      "op": "log",
      "stack_out": []
    },
    "223": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "224": {
      "op": "return",
      "stack_out": []
    },
    "225": {
      "block": "main_update_status_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "227": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "228": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "229": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "231": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "232": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "235": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "238": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.update_status",
      "op": "callsub update_status",
      "defined_out": [
        "to_encode%4#0"
      ],
      "stack_out": [
        "to_encode%4#0"
      ]
    },
    "241": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0"
      ]
    },
    "242": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "val_as_bytes%4#0",
        "0x151f7c75"
      ]
    },
    "243": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%4#0"
      ]
    },
    "244": {
      "op": "concat",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "245": {
      "op": "log",
      "stack_out": []
    },
    "246": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "247": {
      "op": "return",
      "stack_out": []
    },
    "248": {
      "block": "main_update_global_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "250": {
      "op": "!",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "251": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "252": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "254": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "255": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "258": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "261": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "264": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0"
      ]
    },
    "267": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[1]%0#0",
        "tmp%29#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0",
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "270": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "271": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%33#0"
      ]
    },
    "273": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "276": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%33#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%29#0",
        "tmp%31#0",
        "tmp%33#0",
        "tmp%35#0"
      ]
    },
    "279": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.update_global",
      "op": "callsub update_global",
      "defined_out": [
        "to_encode%3#0"
      ],
      "stack_out": [
        "to_encode%3#0"
      ]
    },
    "282": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0"
      ]
    },
    "283": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "val_as_bytes%3#0",
        "0x151f7c75"
      ]
    },
    "284": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%3#0"
      ]
    },
    "285": {
      "op": "concat",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "286": {
      "op": "log",
      "stack_out": []
    },
    "287": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "288": {
      "op": "return",
      "stack_out": []
    },
    "289": {
      "block": "main_close_out_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "291": {
      "op": "pushint 2 // CloseOut",
      "defined_out": [
        "CloseOut",
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0",
        "CloseOut"
      ]
    },
    "293": {
      "op": "==",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "294": {
      "error": "OnCompletion is not CloseOut",
      "op": "assert // OnCompletion is not CloseOut",
      "stack_out": []
    },
    "295": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "297": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "298": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.close_out",
      "op": "callsub close_out",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "301": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "302": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "303": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "304": {
      "op": "concat",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "305": {
      "op": "log",
      "stack_out": []
    },
    "306": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "307": {
      "op": "return",
      "stack_out": []
    },
    "308": {
      "block": "main_opt_in_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0"
      ]
    },
    "310": {
      "op": "intc_1 // OptIn",
      "defined_out": [
        "OptIn",
        "tmp%14#0"
      ],
      "stack_out": [
        "tmp%14#0",
        "OptIn"
      ]
    },
    "311": {
      "op": "==",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "312": {
      "error": "OnCompletion is not OptIn",
      "op": "assert // OnCompletion is not OptIn",
      "stack_out": []
    },
    "313": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "315": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "316": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.opt_in",
      "op": "callsub opt_in",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "319": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "320": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "321": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "322": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "323": {
      "op": "log",
      "stack_out": []
    },
    "324": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "325": {
      "op": "return",
      "stack_out": []
    },
    "326": {
      "block": "main_initialize_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "328": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "329": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "330": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "332": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "333": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "336": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "339": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "tmp%8#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%9#0"
      ]
    },
    "342": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0"
      ]
    },
    "345": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "tmp%10#0",
        "tmp%11#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%11#0"
      ]
    },
    "348": {
      "op": "extract 2 0",
      "defined_out": [
        "tmp%10#0",
        "tmp%12#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0",
        "tmp%10#0",
        "tmp%12#0"
      ]
    },
    "351": {
      "callsub": "projects.trader.smart_contracts.trader_app.contract.BookContract.initialize",
      "op": "callsub initialize",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "354": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "355": {
      "op": "bytec_0 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "356": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "357": {
      "op": "concat",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "358": {
      "op": "log",
      "stack_out": []
    },
    "359": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "360": {
      "op": "return",
      "stack_out": []
    },
    "361": {
      "block": "main_bare_routing@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "363": {
      "op": "bnz main_after_if_else@14",
      "stack_out": []
    },
    "366": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "368": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "369": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.initialize",
      "params": {
        "user_id#0": "bytes",
        "book_id#0": "bytes",
        "parameters#0": "bytes"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "375": {
      "op": "bytec 8 // \"g_user_id\"",
      "defined_out": [
        "\"g_user_id\""
      ],
      "stack_out": [
        "\"g_user_id\""
      ]
    },
    "377": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"g_user_id\"",
        "user_id#0 (copy)"
      ],
      "stack_out": [
        "\"g_user_id\"",
        "user_id#0 (copy)"
      ]
    },
    "379": {
      "op": "app_global_put",
      "stack_out": []
    },
    "380": {
      "op": "bytec 9 // \"g_book_id\"",
      "defined_out": [
        "\"g_book_id\""
      ],
      "stack_out": [
        "\"g_book_id\""
      ]
    },
    "382": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"g_book_id\"",
        "book_id#0 (copy)"
      ],
      "stack_out": [
        "\"g_book_id\"",
        "book_id#0 (copy)"
      ]
    },
    "384": {
      "op": "app_global_put",
      "stack_out": []
    },
    "385": {
      "op": "bytec_2 // \"g_address\"",
      "defined_out": [
        "\"g_address\""
      ],
      "stack_out": [
        "\"g_address\""
      ]
    },
    "386": {
      "op": "pushbytes base32(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) // addr AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ",
      "defined_out": [
        "\"g_address\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ],
      "stack_out": [
        "\"g_address\"",
        "Address(AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAY5HFKQ)"
      ]
    },
    "420": {
      "op": "app_global_put",
      "stack_out": []
    },
    "421": {
      "op": "bytec 10 // \"g_params\"",
      "defined_out": [
        "\"g_params\""
      ],
      "stack_out": [
        "\"g_params\""
      ]
    },
    "423": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"g_params\"",
        "parameters#0 (copy)"
      ],
      "stack_out": [
        "\"g_params\"",
        "parameters#0 (copy)"
      ]
    },
    "425": {
      "op": "app_global_put",
      "stack_out": []
    },
    "426": {
      "op": "bytec_1 // \"g_status\"",
      "defined_out": [
        "\"g_status\""
      ],
      "stack_out": [
        "\"g_status\""
      ]
    },
    "427": {
      "op": "bytec 4 // \"ACTIVE\"",
      "defined_out": [
        "\"ACTIVE\"",
        "\"g_status\""
      ],
      "stack_out": [
        "\"g_status\"",
        "\"ACTIVE\""
      ]
    },
    "429": {
      "op": "app_global_put",
      "stack_out": []
    },
    "430": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "431": {
      "retsub": true,
      "op": "retsub"
    },
    "432": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.opt_in",
      "params": {},
      "block": "opt_in",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "434": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "435": {
      "op": "bytec_2 // \"g_address\"",
      "defined_out": [
        "\"g_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"g_address\""
      ]
    },
    "436": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "437": {
      "error": "check self.g_address exists",
      "op": "assert // check self.g_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "438": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "439": {
      "error": "Only authorized user can opt in",
      "op": "assert // Only authorized user can opt in",
      "stack_out": []
    },
    "440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "441": {
      "op": "bytec_1 // \"g_status\"",
      "defined_out": [
        "\"g_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_status\""
      ]
    },
    "442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "443": {
      "error": "check self.g_status exists",
      "op": "assert // check self.g_status exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "444": {
      "op": "bytec 4 // \"ACTIVE\"",
      "defined_out": [
        "\"ACTIVE\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"ACTIVE\""
      ]
    },
    "446": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "447": {
      "error": "Contract must be active",
      "op": "assert // Contract must be active",
      "stack_out": []
    },
    "448": {
      "op": "bytec 5 // \"l_book_hash\"",
      "defined_out": [
        "\"l_book_hash\""
      ],
      "stack_out": [
        "\"l_book_hash\""
      ]
    },
    "450": {
      "op": "bytec_3 // 0x4e414e",
      "defined_out": [
        "\"l_book_hash\"",
        "0x4e414e"
      ],
      "stack_out": [
        "\"l_book_hash\"",
        "0x4e414e"
      ]
    },
    "451": {
      "op": "app_global_put",
      "stack_out": []
    },
    "452": {
      "op": "bytec 6 // \"l_research_hash\"",
      "defined_out": [
        "\"l_research_hash\""
      ],
      "stack_out": [
        "\"l_research_hash\""
      ]
    },
    "454": {
      "op": "bytec_3 // 0x4e414e",
      "stack_out": [
        "\"l_research_hash\"",
        "0x4e414e"
      ]
    },
    "455": {
      "op": "app_global_put",
      "stack_out": []
    },
    "456": {
      "op": "bytec 7 // \"l_params\"",
      "defined_out": [
        "\"l_params\""
      ],
      "stack_out": [
        "\"l_params\""
      ]
    },
    "458": {
      "op": "bytec_3 // 0x4e414e",
      "stack_out": [
        "\"l_params\"",
        "0x4e414e"
      ]
    },
    "459": {
      "op": "app_global_put",
      "stack_out": []
    },
    "460": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "461": {
      "retsub": true,
      "op": "retsub"
    },
    "462": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.close_out",
      "params": {},
      "block": "close_out",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "464": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "465": {
      "op": "bytec_2 // \"g_address\"",
      "defined_out": [
        "\"g_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"g_address\""
      ]
    },
    "466": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "467": {
      "error": "check self.g_address exists",
      "op": "assert // check self.g_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "468": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "469": {
      "error": "Only authorized user can close out",
      "op": "assert // Only authorized user can close out",
      "stack_out": []
    },
    "470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "471": {
      "op": "bytec_1 // \"g_status\"",
      "defined_out": [
        "\"g_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_status\""
      ]
    },
    "472": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "473": {
      "error": "check self.g_status exists",
      "op": "assert // check self.g_status exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "474": {
      "op": "bytec 4 // \"ACTIVE\"",
      "defined_out": [
        "\"ACTIVE\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"ACTIVE\""
      ]
    },
    "476": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "477": {
      "error": "Contract must be active",
      "op": "assert // Contract must be active",
      "stack_out": []
    },
    "478": {
      "op": "bytec 5 // \"l_book_hash\"",
      "defined_out": [
        "\"l_book_hash\""
      ],
      "stack_out": [
        "\"l_book_hash\""
      ]
    },
    "480": {
      "op": "bytec_3 // 0x4e414e",
      "defined_out": [
        "\"l_book_hash\"",
        "0x4e414e"
      ],
      "stack_out": [
        "\"l_book_hash\"",
        "0x4e414e"
      ]
    },
    "481": {
      "op": "app_global_put",
      "stack_out": []
    },
    "482": {
      "op": "bytec 6 // \"l_research_hash\"",
      "defined_out": [
        "\"l_research_hash\""
      ],
      "stack_out": [
        "\"l_research_hash\""
      ]
    },
    "484": {
      "op": "bytec_3 // 0x4e414e",
      "stack_out": [
        "\"l_research_hash\"",
        "0x4e414e"
      ]
    },
    "485": {
      "op": "app_global_put",
      "stack_out": []
    },
    "486": {
      "op": "bytec 7 // \"l_params\"",
      "defined_out": [
        "\"l_params\""
      ],
      "stack_out": [
        "\"l_params\""
      ]
    },
    "488": {
      "op": "bytec_3 // 0x4e414e",
      "stack_out": [
        "\"l_params\"",
        "0x4e414e"
      ]
    },
    "489": {
      "op": "app_global_put",
      "stack_out": []
    },
    "490": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "491": {
      "retsub": true,
      "op": "retsub"
    },
    "492": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.update_global",
      "params": {
        "new_user_id#0": "bytes",
        "new_book_id#0": "bytes",
        "new_address#0": "bytes",
        "new_params#0": "bytes"
      },
      "block": "update_global",
      "stack_in": [],
      "op": "proto 4 1"
    },
    "495": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "497": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "499": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "500": {
      "error": "Only creator can supdate parameters",
      "op": "assert // Only creator can supdate parameters",
      "stack_out": []
    },
    "501": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "502": {
      "op": "bytec 8 // \"g_user_id\"",
      "defined_out": [
        "\"g_user_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_user_id\""
      ]
    },
    "504": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "505": {
      "error": "check self.g_user_id exists",
      "op": "assert // check self.g_user_id exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "506": {
      "op": "frame_dig -4",
      "defined_out": [
        "maybe_value%0#0",
        "new_user_id#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "new_user_id#0 (copy)"
      ]
    },
    "508": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "509": {
      "op": "bnz update_global_bool_true@4",
      "stack_out": []
    },
    "512": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "513": {
      "op": "bytec 9 // \"g_book_id\"",
      "defined_out": [
        "\"g_book_id\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_book_id\""
      ]
    },
    "515": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "516": {
      "error": "check self.g_book_id exists",
      "op": "assert // check self.g_book_id exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "517": {
      "op": "frame_dig -3",
      "defined_out": [
        "maybe_value%1#0",
        "new_book_id#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "new_book_id#0 (copy)"
      ]
    },
    "519": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "520": {
      "op": "bnz update_global_bool_true@4",
      "stack_out": []
    },
    "523": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "524": {
      "op": "bytec_2 // \"g_address\"",
      "defined_out": [
        "\"g_address\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_address\""
      ]
    },
    "525": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "526": {
      "error": "check self.g_address exists",
      "op": "assert // check self.g_address exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "527": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%2#0",
        "new_address#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "new_address#0 (copy)"
      ]
    },
    "529": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "530": {
      "op": "bnz update_global_bool_true@4",
      "stack_out": []
    },
    "533": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "534": {
      "op": "bytec 10 // \"g_params\"",
      "defined_out": [
        "\"g_params\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_params\""
      ]
    },
    "536": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "537": {
      "error": "check self.g_params exists",
      "op": "assert // check self.g_params exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "538": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%3#0",
        "new_params#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "new_params#0 (copy)"
      ]
    },
    "540": {
      "op": "!=",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0"
      ]
    },
    "541": {
      "op": "bz update_global_bool_false@5",
      "stack_out": []
    },
    "544": {
      "block": "update_global_bool_true@4",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "545": {
      "block": "update_global_bool_merge@6",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "New parameters must be different",
      "op": "assert // New parameters must be different",
      "defined_out": [],
      "stack_out": []
    },
    "546": {
      "op": "bytec 8 // \"g_user_id\"",
      "defined_out": [
        "\"g_user_id\""
      ],
      "stack_out": [
        "\"g_user_id\""
      ]
    },
    "548": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"g_user_id\"",
        "new_user_id#0 (copy)"
      ],
      "stack_out": [
        "\"g_user_id\"",
        "new_user_id#0 (copy)"
      ]
    },
    "550": {
      "op": "app_global_put",
      "stack_out": []
    },
    "551": {
      "op": "bytec 9 // \"g_book_id\"",
      "defined_out": [
        "\"g_book_id\""
      ],
      "stack_out": [
        "\"g_book_id\""
      ]
    },
    "553": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"g_book_id\"",
        "new_book_id#0 (copy)"
      ],
      "stack_out": [
        "\"g_book_id\"",
        "new_book_id#0 (copy)"
      ]
    },
    "555": {
      "op": "app_global_put",
      "stack_out": []
    },
    "556": {
      "op": "bytec_2 // \"g_address\"",
      "defined_out": [
        "\"g_address\""
      ],
      "stack_out": [
        "\"g_address\""
      ]
    },
    "557": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"g_address\"",
        "new_address#0 (copy)"
      ],
      "stack_out": [
        "\"g_address\"",
        "new_address#0 (copy)"
      ]
    },
    "559": {
      "op": "app_global_put",
      "stack_out": []
    },
    "560": {
      "op": "bytec 10 // \"g_params\"",
      "defined_out": [
        "\"g_params\""
      ],
      "stack_out": [
        "\"g_params\""
      ]
    },
    "562": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"g_params\"",
        "new_params#0 (copy)"
      ],
      "stack_out": [
        "\"g_params\"",
        "new_params#0 (copy)"
      ]
    },
    "564": {
      "op": "app_global_put",
      "stack_out": []
    },
    "565": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "566": {
      "retsub": true,
      "op": "retsub"
    },
    "567": {
      "block": "update_global_bool_false@5",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "568": {
      "op": "b update_global_bool_merge@6"
    },
    "571": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.update_status",
      "params": {
        "new_status#0": "bytes"
      },
      "block": "update_status",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "574": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "576": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "578": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "579": {
      "error": "Only creator can update status",
      "op": "assert // Only creator can update status",
      "stack_out": []
    },
    "580": {
      "op": "bytec_1 // \"g_status\"",
      "defined_out": [
        "\"g_status\""
      ],
      "stack_out": [
        "\"g_status\""
      ]
    },
    "581": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"g_status\"",
        "new_status#0 (copy)"
      ],
      "stack_out": [
        "\"g_status\"",
        "new_status#0 (copy)"
      ]
    },
    "583": {
      "op": "app_global_put",
      "stack_out": []
    },
    "584": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "585": {
      "retsub": true,
      "op": "retsub"
    },
    "586": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.update_local",
      "params": {
        "book_hash#0": "bytes",
        "research_hash#0": "bytes",
        "params#0": "bytes"
      },
      "block": "update_local",
      "stack_in": [],
      "op": "proto 3 1"
    },
    "589": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "591": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0"
      ]
    },
    "592": {
      "op": "bytec_2 // \"g_address\"",
      "defined_out": [
        "\"g_address\"",
        "0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "0",
        "\"g_address\""
      ]
    },
    "593": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "594": {
      "error": "check self.g_address exists",
      "op": "assert // check self.g_address exists",
      "stack_out": [
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "595": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "596": {
      "error": "Only authorized user can update local state",
      "op": "assert // Only authorized user can update local state",
      "stack_out": []
    },
    "597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "598": {
      "op": "bytec_1 // \"g_status\"",
      "defined_out": [
        "\"g_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_status\""
      ]
    },
    "599": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "600": {
      "error": "check self.g_status exists",
      "op": "assert // check self.g_status exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "601": {
      "op": "bytec 4 // \"ACTIVE\"",
      "defined_out": [
        "\"ACTIVE\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"ACTIVE\""
      ]
    },
    "603": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "604": {
      "error": "Contract must be active",
      "op": "assert // Contract must be active",
      "stack_out": []
    },
    "605": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "606": {
      "op": "bytec 5 // \"l_book_hash\"",
      "defined_out": [
        "\"l_book_hash\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"l_book_hash\""
      ]
    },
    "608": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "609": {
      "error": "check self.l_book_hash exists",
      "op": "assert // check self.l_book_hash exists",
      "stack_out": [
        "maybe_value%2#0"
      ]
    },
    "610": {
      "op": "frame_dig -3",
      "defined_out": [
        "book_hash#0 (copy)",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "book_hash#0 (copy)"
      ]
    },
    "612": {
      "op": "!=",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "613": {
      "op": "bnz update_local_bool_true@3",
      "stack_out": []
    },
    "616": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "617": {
      "op": "bytec 6 // \"l_research_hash\"",
      "defined_out": [
        "\"l_research_hash\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"l_research_hash\""
      ]
    },
    "619": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "620": {
      "error": "check self.l_research_hash exists",
      "op": "assert // check self.l_research_hash exists",
      "stack_out": [
        "maybe_value%3#0"
      ]
    },
    "621": {
      "op": "frame_dig -2",
      "defined_out": [
        "maybe_value%3#0",
        "research_hash#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "research_hash#0 (copy)"
      ]
    },
    "623": {
      "op": "!=",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "624": {
      "op": "bnz update_local_bool_true@3",
      "stack_out": []
    },
    "627": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "628": {
      "op": "bytec 7 // \"l_params\"",
      "defined_out": [
        "\"l_params\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"l_params\""
      ]
    },
    "630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "631": {
      "error": "check self.l_params exists",
      "op": "assert // check self.l_params exists",
      "stack_out": [
        "maybe_value%4#0"
      ]
    },
    "632": {
      "op": "frame_dig -1",
      "defined_out": [
        "maybe_value%4#0",
        "params#0 (copy)"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "params#0 (copy)"
      ]
    },
    "634": {
      "op": "!=",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "635": {
      "op": "bz update_local_bool_false@4",
      "stack_out": []
    },
    "638": {
      "block": "update_local_bool_true@3",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "639": {
      "block": "update_local_bool_merge@5",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "At least one parameter must change",
      "op": "assert // At least one parameter must change",
      "defined_out": [],
      "stack_out": []
    },
    "640": {
      "op": "bytec 5 // \"l_book_hash\"",
      "defined_out": [
        "\"l_book_hash\""
      ],
      "stack_out": [
        "\"l_book_hash\""
      ]
    },
    "642": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"l_book_hash\"",
        "book_hash#0 (copy)"
      ],
      "stack_out": [
        "\"l_book_hash\"",
        "book_hash#0 (copy)"
      ]
    },
    "644": {
      "op": "app_global_put",
      "stack_out": []
    },
    "645": {
      "op": "bytec 6 // \"l_research_hash\"",
      "defined_out": [
        "\"l_research_hash\""
      ],
      "stack_out": [
        "\"l_research_hash\""
      ]
    },
    "647": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"l_research_hash\"",
        "research_hash#0 (copy)"
      ],
      "stack_out": [
        "\"l_research_hash\"",
        "research_hash#0 (copy)"
      ]
    },
    "649": {
      "op": "app_global_put",
      "stack_out": []
    },
    "650": {
      "op": "bytec 7 // \"l_params\"",
      "defined_out": [
        "\"l_params\""
      ],
      "stack_out": [
        "\"l_params\""
      ]
    },
    "652": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"l_params\"",
        "params#0 (copy)"
      ],
      "stack_out": [
        "\"l_params\"",
        "params#0 (copy)"
      ]
    },
    "654": {
      "op": "app_global_put",
      "stack_out": []
    },
    "655": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "656": {
      "retsub": true,
      "op": "retsub"
    },
    "657": {
      "block": "update_local_bool_false@4",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "658": {
      "op": "b update_local_bool_merge@5"
    },
    "661": {
      "subroutine": "projects.trader.smart_contracts.trader_app.contract.BookContract.delete_application",
      "params": {},
      "block": "delete_application",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "663": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "665": {
      "op": "==",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "666": {
      "error": "Only creator can delete application",
      "op": "assert // Only creator can delete application",
      "stack_out": []
    },
    "667": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "668": {
      "op": "bytec_1 // \"g_status\"",
      "defined_out": [
        "\"g_status\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"g_status\""
      ]
    },
    "669": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "670": {
      "error": "check self.g_status exists",
      "op": "assert // check self.g_status exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "671": {
      "op": "pushbytes \"INACTIVE-STOP\"",
      "defined_out": [
        "\"INACTIVE-STOP\"",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "\"INACTIVE-STOP\""
      ]
    },
    "686": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "687": {
      "op": "bnz delete_application_bool_true@2",
      "stack_out": []
    },
    "690": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "691": {
      "op": "bytec_1 // \"g_status\"",
      "stack_out": [
        "0",
        "\"g_status\""
      ]
    },
    "692": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "693": {
      "error": "check self.g_status exists",
      "op": "assert // check self.g_status exists",
      "stack_out": [
        "maybe_value%1#0"
      ]
    },
    "694": {
      "op": "pushbytes \"INACTIVE-SOLD\"",
      "defined_out": [
        "\"INACTIVE-SOLD\"",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "\"INACTIVE-SOLD\""
      ]
    },
    "709": {
      "op": "==",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "710": {
      "op": "bz delete_application_bool_false@3",
      "stack_out": []
    },
    "713": {
      "block": "delete_application_bool_true@2",
      "stack_in": [],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "714": {
      "block": "delete_application_bool_merge@4",
      "stack_in": [
        "or_result%0#0"
      ],
      "error": "Contract must be inactive to delete",
      "op": "assert // Contract must be inactive to delete",
      "defined_out": [],
      "stack_out": []
    },
    "715": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1"
      ],
      "stack_out": [
        "1"
      ]
    },
    "716": {
      "retsub": true,
      "op": "retsub"
    },
    "717": {
      "block": "delete_application_bool_false@3",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "or_result%0#0"
      ]
    },
    "718": {
      "op": "b delete_application_bool_merge@4"
    }
  }
}