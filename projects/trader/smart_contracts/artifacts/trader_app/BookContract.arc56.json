{
    "name": "BookContract",
    "structs": {},
    "methods": [
        {
            "name": "initialize",
            "args": [
                {
                    "type": "byte[]",
                    "name": "user_id"
                },
                {
                    "type": "byte[]",
                    "name": "book_id"
                },
                {
                    "type": "byte[]",
                    "name": "parameters"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize the contract with required parameters.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "opt_in",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "OptIn"
                ]
            },
            "readonly": false,
            "desc": "Handle user opt-in to the contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "close_out",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "CloseOut"
                ]
            },
            "readonly": false,
            "desc": "Handle user closing out from the contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_address",
            "args": [
                {
                    "type": "account",
                    "name": "new_address"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the global parameters of the contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_params",
            "args": [
                {
                    "type": "byte[]",
                    "name": "new_params"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the global parameters of the contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_status",
            "args": [
                {
                    "type": "string",
                    "name": "new_status"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the status of the contract.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "update_local",
            "args": [
                {
                    "type": "byte[]",
                    "name": "book_hash"
                },
                {
                    "type": "byte[]",
                    "name": "research_hash"
                },
                {
                    "type": "byte[]",
                    "name": "params"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the local state for the user.",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "delete_application",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "DeleteApplication"
                ]
            },
            "readonly": false,
            "desc": "Delete the contract if it's inactive.",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 0,
                "bytes": 8
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "g_user_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z191c2VyX2lk"
                },
                "g_book_id": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z19ib29rX2lk"
                },
                "g_address": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "Z19hZGRyZXNz"
                },
                "g_status": {
                    "keyType": "AVMString",
                    "valueType": "AVMString",
                    "key": "Z19zdGF0dXM="
                },
                "g_params": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "Z19wYXJhbXM="
                },
                "l_book_hash": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bF9ib29rX2hhc2g="
                },
                "l_research_hash": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bF9yZXNlYXJjaF9oYXNo"
                },
                "l_params": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "bF9wYXJhbXM="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {}
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        676
                    ],
                    "errorMessage": "At least one parameter must change"
                },
                {
                    "pc": [
                        485,
                        515,
                        641
                    ],
                    "errorMessage": "Contract must be active"
                },
                {
                    "pc": [
                        725
                    ],
                    "errorMessage": "Contract must be inactive to delete"
                },
                {
                    "pc": [
                        546,
                        570
                    ],
                    "errorMessage": "New parameters must be different"
                },
                {
                    "pc": [
                        314
                    ],
                    "errorMessage": "OnCompletion is not CloseOut"
                },
                {
                    "pc": [
                        191
                    ],
                    "errorMessage": "OnCompletion is not DeleteApplication"
                },
                {
                    "pc": [
                        208,
                        243,
                        266,
                        289,
                        349
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        332
                    ],
                    "errorMessage": "OnCompletion is not OptIn"
                },
                {
                    "pc": [
                        507
                    ],
                    "errorMessage": "Only authorized user can close out"
                },
                {
                    "pc": [
                        477
                    ],
                    "errorMessage": "Only authorized user can opt in"
                },
                {
                    "pc": [
                        633
                    ],
                    "errorMessage": "Only authorized user can update local state"
                },
                {
                    "pc": [
                        703
                    ],
                    "errorMessage": "Only creator can delete application"
                },
                {
                    "pc": [
                        538
                    ],
                    "errorMessage": "Only creator can supdate parameters"
                },
                {
                    "pc": [
                        561
                    ],
                    "errorMessage": "Only creator can update parameters"
                },
                {
                    "pc": [
                        586
                    ],
                    "errorMessage": "Only creator can update status"
                },
                {
                    "pc": [
                        612
                    ],
                    "errorMessage": "Status must be ACTIVE or INACTIVE-STOP or INACTIVE-SOLD"
                },
                {
                    "pc": [
                        389
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        194,
                        211,
                        246,
                        269,
                        292,
                        317,
                        335,
                        352
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        475,
                        505,
                        542,
                        631
                    ],
                    "errorMessage": "check self.g_address exists"
                },
                {
                    "pc": [
                        566
                    ],
                    "errorMessage": "check self.g_params exists"
                },
                {
                    "pc": [
                        481,
                        511,
                        637,
                        707,
                        717
                    ],
                    "errorMessage": "check self.g_status exists"
                },
                {
                    "pc": [
                        646
                    ],
                    "errorMessage": "check self.l_book_hash exists"
                },
                {
                    "pc": [
                        668
                    ],
                    "errorMessage": "check self.l_params exists"
                },
                {
                    "pc": [
                        657
                    ],
                    "errorMessage": "check self.l_research_hash exists"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiACAQAmCwQVH3x1CGdfc3RhdHVzCWdfYWRkcmVzcwNOQU4GQUNUSVZFC2xfYm9va19oYXNoD2xfcmVzZWFyY2hfaGFzaAhsX3BhcmFtcwhnX3BhcmFtcw1JTkFDVElWRS1TVE9QDUlOQUNUSVZFLVNPTEQxG0EBBIIIBCMl+a8Eh4m82wSr55wfBIuoF/4Ew7099QT6mKvfBKHYG9MEIL719zYaAI4IAKIAkAB9AGYATwA4ABUAAiNDMRmBBRJEMRhEiAH0FihMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAYYWKExQsCJDMRkURDEYRDYaAVcCAIgBQhYoTFCwIkMxGRREMRhENhoBVwIAiAESFihMULAiQzEZFEQxGEQ2GgEXwByIAOQWKExQsCJDMRmBAhJEMRhEiACzFihMULAiQzEZIhJEMRhEiACDFihMULAiQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIABIWKExQsCJDMRlA/zYxGBREIkOKAwGACWdfdXNlcl9pZIv9Z4AJZ19ib29rX2lki/5nKoAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABnJwiL/2cpJwRnIokxACMqZUQSRCMpZUQnBBJEJwUrZycGK2cnBytnIokxACMqZUQSRCMpZUQnBBJEJwUrZycGK2cnBytnIomKAQExADIJEkQjKmVEi/8TRCqL/2ciiYoBATEAMgkSRCMnCGVEi/8TRCcIi/9nIomKAQExADIJEkSL/ycEEkAAEIv/JwkSQAAIi/8nChJBAAgiRCmL/2ciiSNC//WKAwExACMqZUQSRCMpZUQnBBJEIycFZUSL/RNAABYjJwZlRIv+E0AACyMnB2VEi/8TQQATIkQnBYv9ZycGi/5nJweL/2ciiSNC/+oxADIJEkQjKWVEJwkSQAAKIyllRCcKEkEABCJEIokjQv/5",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 8,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}