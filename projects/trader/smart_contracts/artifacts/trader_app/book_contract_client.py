# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "user_id"}, {"type": "byte[]", "name": "book_id"}, {"type": "byte[]", "name": "parameters"}], "name": "initialize", "returns": {"type": "uint64"}, "desc": "Initialize the contract with required parameters.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["OptIn"], "create": []}, "args": [], "name": "opt_in", "returns": {"type": "uint64"}, "desc": "Handle user opt-in to the contract.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["CloseOut"], "create": []}, "args": [], "name": "close_out", "returns": {"type": "uint64"}, "desc": "Handle user closing out from the contract.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "new_user_id"}, {"type": "byte[]", "name": "new_book_id"}, {"type": "account", "name": "new_address"}, {"type": "byte[]", "name": "new_params"}], "name": "update_global", "returns": {"type": "uint64"}, "desc": "Update the global parameters of the contract.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "string", "name": "new_status"}], "name": "update_status", "returns": {"type": "uint64"}, "desc": "Update the status of the contract.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "byte[]", "name": "book_hash"}, {"type": "byte[]", "name": "research_hash"}, {"type": "byte[]", "name": "params"}], "name": "update_local", "returns": {"type": "uint64"}, "desc": "Update the local state for the user.", "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["DeleteApplication"], "create": []}, "args": [], "name": "delete_application", "returns": {"type": "uint64"}, "desc": "Delete the contract if it's inactive.", "events": [], "readonly": false, "recommendations": {}}], "name": "BookContract", "state": {"keys": {"box": {}, "global": {"g_user_id": {"key": "Z191c2VyX2lk", "keyType": "AVMString", "valueType": "AVMBytes"}, "g_book_id": {"key": "Z19ib29rX2lk", "keyType": "AVMString", "valueType": "AVMBytes"}, "g_address": {"key": "Z19hZGRyZXNz", "keyType": "AVMString", "valueType": "address"}, "g_status": {"key": "Z19zdGF0dXM=", "keyType": "AVMString", "valueType": "AVMString"}, "g_params": {"key": "Z19wYXJhbXM=", "keyType": "AVMString", "valueType": "AVMBytes"}, "l_book_hash": {"key": "bF9ib29rX2hhc2g=", "keyType": "AVMString", "valueType": "AVMBytes"}, "l_research_hash": {"key": "bF9yZXNlYXJjaF9oYXNo", "keyType": "AVMString", "valueType": "AVMBytes"}, "l_params": {"key": "bF9wYXJhbXM=", "keyType": "AVMString", "valueType": "AVMBytes"}}, "local": {}}, "maps": {"box": {}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 8, "ints": 0}, "local": {"bytes": 0, "ints": 0}}}, "structs": {}, "byteCode": {"approval": "CiACAAEmCwQVH3x1CGdfc3RhdHVzCWdfYWRkcmVzcwNOQU4GQUNUSVZFC2xfYm9va19oYXNoD2xfcmVzZWFyY2hfaGFzaAhsX3BhcmFtcwlnX3VzZXJfaWQJZ19ib29rX2lkCGdfcGFyYW1zMRtBAPiCBwQjJfmvBIeJvNsEq+ecHwSK9n9QBPqYq98Eodgb0wQgvvX3NhoAjgcAnQCLAHgATwA4ABUAAiJDMRmBBRJEMRhEiAHeFihMULAjQzEZFEQxGEQ2GgFXAgA2GgJXAgA2GgNXAgCIAXAWKExQsCNDMRkURDEYRDYaAVcCAIgBShYoTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDF8AcNhoEVwIAiADSFihMULAjQzEZgQISRDEYRIgAoRYoTFCwI0MxGSMSRDEYRIgAcRYoTFCwI0MxGRREMRhENhoBVwIANhoCVwIANhoDVwIAiAASFihMULAjQzEZQP87MRgURCNDigMBJwiL/WcnCYv+ZyqAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZycKi/9nKScEZyOJMQAiKmVEEkQiKWVEJwQSRCcFK2cnBitnJwcrZyOJMQAiKmVEEkQiKWVEJwQSRCcFK2cnBitnJwcrZyOJigQBMQAyCRJEIicIZUSL/BNAACAiJwllRIv9E0AAFSIqZUSL/hNAAAsiJwplRIv/E0EAFyNEJwiL/GcnCYv9ZyqL/mcnCov/ZyOJIkL/5ooBATEAMgkSRCmL/2cjiYoDATEAIiplRBJEIillRCcEEkQiJwVlRIv9E0AAFiInBmVEi/4TQAALIicHZUSL/xNBABMjRCcFi/1nJwaL/mcnB4v/ZyOJIkL/6jEAMgkSRCIpZUSADUlOQUNUSVZFLVNUT1ASQAAXIillRIANSU5BQ1RJVkUtU09MRBJBAAQjRCOJIkL/+Q==", "clear": "CoEBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 4, "minor": 8, "patch": 0}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [639], "errorMessage": "At least one parameter must change"}, {"pc": [447, 477, 604], "errorMessage": "Contract must be active"}, {"pc": [714], "errorMessage": "Contract must be inactive to delete"}, {"pc": [545], "errorMessage": "New parameters must be different"}, {"pc": [294], "errorMessage": "OnCompletion is not CloseOut"}, {"pc": [176], "errorMessage": "OnCompletion is not DeleteApplication"}, {"pc": [193, 228, 251, 329], "errorMessage": "OnCompletion is not NoOp"}, {"pc": [312], "errorMessage": "OnCompletion is not OptIn"}, {"pc": [469], "errorMessage": "Only authorized user can close out"}, {"pc": [439], "errorMessage": "Only authorized user can opt in"}, {"pc": [596], "errorMessage": "Only authorized user can update local state"}, {"pc": [666], "errorMessage": "Only creator can delete application"}, {"pc": [500], "errorMessage": "Only creator can supdate parameters"}, {"pc": [579], "errorMessage": "Only creator can update status"}, {"pc": [369], "errorMessage": "can only call when creating"}, {"pc": [179, 196, 231, 254, 297, 315, 332], "errorMessage": "can only call when not creating"}, {"pc": [437, 467, 526, 594], "errorMessage": "check self.g_address exists"}, {"pc": [516], "errorMessage": "check self.g_book_id exists"}, {"pc": [537], "errorMessage": "check self.g_params exists"}, {"pc": [443, 473, 600, 670, 693], "errorMessage": "check self.g_status exists"}, {"pc": [505], "errorMessage": "check self.g_user_id exists"}, {"pc": [609], "errorMessage": "check self.l_book_hash exists"}, {"pc": [631], "errorMessage": "check self.l_params exists"}, {"pc": [620], "errorMessage": "check self.l_research_hash exists"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True, kw_only=True)
class InitializeArgs:
    """Dataclass for initialize arguments"""
    user_id: bytes | str
    book_id: bytes | str
    parameters: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "initialize(byte[],byte[],byte[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateGlobalArgs:
    """Dataclass for update_global arguments"""
    new_user_id: bytes | str
    new_book_id: bytes | str
    new_address: str | bytes
    new_params: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "update_global(byte[],byte[],account,byte[])uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateStatusArgs:
    """Dataclass for update_status arguments"""
    new_status: str

    @property
    def abi_method_signature(self) -> str:
        return "update_status(string)uint64"

@dataclasses.dataclass(frozen=True, kw_only=True)
class UpdateLocalArgs:
    """Dataclass for update_local arguments"""
    book_hash: bytes | str
    research_hash: bytes | str
    params: bytes | str

    @property
    def abi_method_signature(self) -> str:
        return "update_local(byte[],byte[],byte[])uint64"


class _BookContractDelete:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppDeleteMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_application()uint64",
        }))


class _BookContractOptIn:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_in(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.opt_in(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in()uint64",
        }))


class _BookContractCloseOut:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def close_out(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.close_out(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_out()uint64",
        }))


class BookContractParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_BookContractDelete":
        return _BookContractDelete(self.app_client)

    @property
    def opt_in(self) -> "_BookContractOptIn":
        return _BookContractOptIn(self.app_client)

    @property
    def close_out(self) -> "_BookContractCloseOut":
        return _BookContractCloseOut(self.app_client)

    def initialize(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(byte[],byte[],byte[])uint64",
            "args": method_args,
        }))

    def update_global(
        self,
        args: tuple[bytes | str, bytes | str, str | bytes, bytes | str] | UpdateGlobalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_global(byte[],byte[],account,byte[])uint64",
            "args": method_args,
        }))

    def update_status(
        self,
        args: tuple[str] | UpdateStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_status(string)uint64",
            "args": method_args,
        }))

    def update_local(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | UpdateLocalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_local(byte[],byte[],byte[])uint64",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class _BookContractDeleteTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_application()uint64",
        }))


class _BookContractOptInTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_in(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.opt_in(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in()uint64",
        }))


class _BookContractCloseOutTransaction:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def close_out(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
    
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.close_out(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_out()uint64",
        }))


class BookContractCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_BookContractDeleteTransaction":
        return _BookContractDeleteTransaction(self.app_client)

    @property
    def opt_in(self) -> "_BookContractOptInTransaction":
        return _BookContractOptInTransaction(self.app_client)

    @property
    def close_out(self) -> "_BookContractCloseOutTransaction":
        return _BookContractCloseOutTransaction(self.app_client)

    def initialize(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(byte[],byte[],byte[])uint64",
            "args": method_args,
        }))

    def update_global(
        self,
        args: tuple[bytes | str, bytes | str, str | bytes, bytes | str] | UpdateGlobalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_global(byte[],byte[],account,byte[])uint64",
            "args": method_args,
        }))

    def update_status(
        self,
        args: tuple[str] | UpdateStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_status(string)uint64",
            "args": method_args,
        }))

    def update_local(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | UpdateLocalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_local(byte[],byte[],byte[])uint64",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class _BookContractDeleteSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def delete_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.delete(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "delete_application()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)


class _BookContractOptInSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_in(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.opt_in(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_in()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)


class _BookContractCloseOutSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def close_out(
        self,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
    
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.close_out(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "close_out()uint64",
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)


class BookContractSend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def delete(self) -> "_BookContractDeleteSend":
        return _BookContractDeleteSend(self.app_client)

    @property
    def opt_in(self) -> "_BookContractOptInSend":
        return _BookContractOptInSend(self.app_client)

    @property
    def close_out(self) -> "_BookContractCloseOutSend":
        return _BookContractCloseOutSend(self.app_client)

    def initialize(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "initialize(byte[],byte[],byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def update_global(
        self,
        args: tuple[bytes | str, bytes | str, str | bytes, bytes | str] | UpdateGlobalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_global(byte[],byte[],account,byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def update_status(
        self,
        args: tuple[str] | UpdateStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_status(string)uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def update_local(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | UpdateLocalArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[int]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "update_local(byte[],byte[],byte[])uint64",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[int], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    g_user_id: bytes
    g_book_id: bytes
    g_address: str
    g_status: str
    g_params: bytes
    l_book_hash: bytes
    l_research_hash: bytes
    l_params: bytes

class BookContractState:
    """Methods to access state for the current BookContract app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def g_user_id(self) -> bytes:
        """Get the current value of the g_user_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("g_user_id")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def g_book_id(self) -> bytes:
        """Get the current value of the g_book_id key in global_state state"""
        value = self.app_client.state.global_state.get_value("g_book_id")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def g_address(self) -> str:
        """Get the current value of the g_address key in global_state state"""
        value = self.app_client.state.global_state.get_value("g_address")
        if isinstance(value, dict) and "address" in self._struct_classes:
            return _init_dataclass(self._struct_classes["address"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def g_status(self) -> str:
        """Get the current value of the g_status key in global_state state"""
        value = self.app_client.state.global_state.get_value("g_status")
        if isinstance(value, dict) and "AVMString" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMString"], value)  # type: ignore
        return typing.cast(str, value)

    @property
    def g_params(self) -> bytes:
        """Get the current value of the g_params key in global_state state"""
        value = self.app_client.state.global_state.get_value("g_params")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def l_book_hash(self) -> bytes:
        """Get the current value of the l_book_hash key in global_state state"""
        value = self.app_client.state.global_state.get_value("l_book_hash")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def l_research_hash(self) -> bytes:
        """Get the current value of the l_research_hash key in global_state state"""
        value = self.app_client.state.global_state.get_value("l_research_hash")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def l_params(self) -> bytes:
        """Get the current value of the l_params key in global_state state"""
        value = self.app_client.state.global_state.get_value("l_params")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

class BookContractClient:
    """Client for interacting with BookContract smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = BookContractParams(self.app_client)
        self.create_transaction = BookContractCreateTransactionParams(self.app_client)
        self.send = BookContractSend(self.app_client)
        self.state = BookContractState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "BookContractClient":
        return BookContractClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "BookContractClient":
        return BookContractClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "BookContractClient":
        return BookContractClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "BookContractComposer":
        return BookContractComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["initialize(byte[],byte[],byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_global(byte[],byte[],account,byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_status(string)uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["update_local(byte[],byte[],byte[])uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["delete_application()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["opt_in()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["close_out()uint64"],
        return_value: algokit_utils.ABIReturn | None
    ) -> int | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | int:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class BookContractBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating BookContract contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

@dataclasses.dataclass(frozen=True)
class BookContractMethodCallDeleteParams(
    algokit_utils.BaseAppClientMethodCallParams[
        typing.Any,
        str | None,
    ]
):
    """Parameters for calling BookContract contract using ABI"""
    on_complete: typing.Literal[OnComplete.DeleteApplicationOC] | None = None
    method: str | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientMethodCallParams:
        method_args = _parse_abi_args(self.args)
        return algokit_utils.AppClientMethodCallParams(
            **{
                **self.__dict__,
                "method": self.method or getattr(self.args, "abi_method_signature", None),
                "args": method_args,
            }
        )

class BookContractFactory(algokit_utils.TypedAppFactoryProtocol[BookContractBareCallCreateParams, None, BookContractMethodCallDeleteParams]):
    """Factory for deploying and managing BookContractClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = BookContractFactoryParams(self.app_factory)
        self.create_transaction = BookContractFactoryCreateTransaction(self.app_factory)
        self.send = BookContractFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: BookContractBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: BookContractMethodCallDeleteParams | None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[BookContractClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params.to_algokit_utils_params() if delete_params else None,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return BookContractClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> BookContractClient:
        """Get an app client by creator address and name"""
        return BookContractClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> BookContractClient:
        """Get an app client by app ID"""
        return BookContractClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class BookContractFactoryParams:
    """Parameters for creating transactions for BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = BookContractFactoryCreateParams(app_factory)
        self.update = BookContractFactoryUpdateParams(app_factory)
        self.delete = BookContractFactoryDeleteParams(app_factory)

class BookContractFactoryCreateParams:
    """Parameters for 'create' operations of BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def initialize(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | InitializeArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the initialize(byte[],byte[],byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "initialize(byte[],byte[],byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_global(
        self,
        args: tuple[bytes | str, bytes | str, str | bytes, bytes | str] | UpdateGlobalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_global(byte[],byte[],account,byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_global(byte[],byte[],account,byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_status(
        self,
        args: tuple[str] | UpdateStatusArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_status(string)uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_status(string)uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def update_local(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | UpdateLocalArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the update_local(byte[],byte[],byte[])uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "update_local(byte[],byte[],byte[])uint64",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def delete_application(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the delete_application()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "delete_application()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def opt_in(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the opt_in()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "opt_in()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

    def close_out(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the close_out()uint64 ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "close_out()uint64",
                "args": None,
                }
            ),
            compilation_params=compilation_params
        )

class BookContractFactoryUpdateParams:
    """Parameters for 'update' operations of BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class BookContractFactoryDeleteParams:
    """Parameters for 'delete' operations of BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class BookContractFactoryCreateTransaction:
    """Create transactions for BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = BookContractFactoryCreateTransactionCreate(app_factory)


class BookContractFactoryCreateTransactionCreate:
    """Create new instances of BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class BookContractFactorySend:
    """Send calls to BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = BookContractFactorySendCreate(app_factory)


class BookContractFactorySendCreate:
    """Send create calls to BookContract contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[BookContractClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return BookContractClient(result[0]), result[1]


class _BookContractDeleteComposer:
    def __init__(self, composer: "BookContractComposer"):
        self.composer = composer
    def delete_application(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self.composer._composer.add_app_delete_method_call(
            self.composer.client.params.delete.delete_application(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "delete_application()uint64", v
            )
        )
        return self.composer


class _BookContractOptInComposer:
    def __init__(self, composer: "BookContractComposer"):
        self.composer = composer
    def opt_in(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self.composer._composer.add_app_call_method_call(
            self.composer.client.params.opt_in.opt_in(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "opt_in()uint64", v
            )
        )
        return self.composer


class _BookContractCloseOutComposer:
    def __init__(self, composer: "BookContractComposer"):
        self.composer = composer
    def close_out(
        self,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self.composer._composer.add_app_call_method_call(
            self.composer.client.params.close_out.close_out(
                
                params=params,
                
            )
        )
        self.composer._result_mappers.append(
            lambda v: self.composer.client.decode_return_value(
                "close_out()uint64", v
            )
        )
        return self.composer


class BookContractComposer:
    """Composer for creating transaction groups for BookContract contract calls"""

    def __init__(self, client: "BookContractClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    @property
    def delete(self) -> "_BookContractDeleteComposer":
        return _BookContractDeleteComposer(self)

    @property
    def opt_in(self) -> "_BookContractOptInComposer":
        return _BookContractOptInComposer(self)

    @property
    def close_out(self) -> "_BookContractCloseOutComposer":
        return _BookContractCloseOutComposer(self)

    def initialize(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | InitializeArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.initialize(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "initialize(byte[],byte[],byte[])uint64", v
            )
        )
        return self

    def update_global(
        self,
        args: tuple[bytes | str, bytes | str, str | bytes, bytes | str] | UpdateGlobalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_global(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_global(byte[],byte[],account,byte[])uint64", v
            )
        )
        return self

    def update_status(
        self,
        args: tuple[str] | UpdateStatusArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_status(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_status(string)uint64", v
            )
        )
        return self

    def update_local(
        self,
        args: tuple[bytes | str, bytes | str, bytes | str] | UpdateLocalArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "BookContractComposer":
        self._composer.add_app_call_method_call(
            self.client.params.update_local(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "update_local(byte[],byte[],byte[])uint64", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "BookContractComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "BookContractComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
